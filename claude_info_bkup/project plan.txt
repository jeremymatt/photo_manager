# Image Viewer & File Manager Package Plan - Updated Structure

## Overview and status
I want to build a database system to manage and tag family photos.  Along with this, I have a simple tkinter-based slideshow app for use on a raspberry pi (the intention is to turn this into a digital picture frame).  This is currently working.  The last piece is a more robust desktop app build on pyqt with the ability to auto-tag, manually tag, organize, and display images.  This is currently not complete.  The current package structure and more specific details regarding desired functinality are provided below.

## Package Structure

```
jmatt@Hannah:/mnt/d/Github/photo_manager$ tree -I "tp|test_photos"
.
├── LICENSE
├── README.md
├── activate_venv.bat
├── claude_info_bkup
│   └── project plan.txt
├── mk_dir.py
├── photo_manager
│   ├── __init__.py
│   ├── __main__.py
│   ├── config
│   │   ├── __init__.py
│   │   ├── config_manager.py
│   │   └── default_config.py
│   ├── core
│   │   ├── __init__.py
│   │   ├── duplicate_detector.py
│   │   ├── export_manager.py
│   │   ├── file_scanner.py
│   │   ├── image_processor.py
│   │   └── tag_manager.py
│   ├── database
│   │   ├── __init__.py
│   │   ├── database_manager.py
│   │   ├── export_db.py
│   │   ├── migrations.py
│   │   └── models.py
│   ├── main.py
│   ├── templates
│   │   └── auto_tag_template.yaml
│   ├── tests
│   │   ├── __init__.py
│   │   ├── test_config.py
│   │   ├── test_database.py
│   │   ├── test_image_processor.py
│   │   └── test_tag_manager.py
│   ├── ui
│   │   ├── __init__.py
│   │   ├── qt
│   │   │   ├── __init__.py
│   │   │   ├── dialogs.py
│   │   │   ├── export_preview.py
│   │   │   ├── image_display.py
│   │   │   ├── image_handler.py
│   │   │   ├── keyboard_handler.py
│   │   │   ├── navigation_controller.py
│   │   │   ├── slideshow.py
│   │   │   └── viewer.py
│   │   └── tkinter
│   │       ├── __init__.py
│   │       ├── fade_effects.py
│   │       └── pi_slideshow.py
│   └── utils
│       ├── __init__.py
│       ├── exif_reader.py
│       ├── filename_parser.py
│       └── helpers.py
├── requirements.txt
├── setup.py
├── slideshow_pi.py
└── test_basic_functionality.py
```

## Refactored Qt UI Module Structure

### File Responsibilities

#### 1. **viewer.py** (~200 lines)
**Purpose**: Main application window and UI coordination
- Window initialization and layout management
- Menu bar creation
- Status bar and progress indicators
- Panel coordination (splitter management)
- Manager initialization and coordination
- Event delegation to specialized controllers
- Theme management
- Application lifecycle (startup/shutdown)

#### 2. **image_display.py** (~300 lines)
**Purpose**: Image display and visual manipulation
- `ImageDisplayWidget` class with zoom/pan/rotate
- `ImageLoadWorker` for background loading
- `AnimatedGifHandler` for GIF playback using QMovie
- Image transformation operations (brightness, contrast, etc.)
- Image caching and memory management
- Progressive loading for large images
- Error handling for corrupt/missing images
- Multiple fit modes (fit to window, actual size, fill window)

#### 3. **keyboard_handler.py** (~150 lines)
**Purpose**: Centralized keyboard and hotkey management
- `KeyboardHandler` class
- Keyboard shortcut registration and management
- Custom hotkey configuration loading
- Key sequence conversion and validation
- Action delegation to appropriate controllers
- Dynamic hotkey modification at runtime
- Conflict detection for key bindings

#### 4. **navigation_controller.py** (~200 lines)
**Purpose**: Image navigation and file operations
- `NavigationController` class
- Image list management and filtering
- Navigation between images and folders
- File operations (mark for deletion, copy, move)
- Directory scanning coordination
- Undo/redo stack management
- Tag operations (copy/paste tags between images)
- Search result handling

#### 5. **slideshow.py** (existing, ~200 lines)
**Purpose**: Slideshow functionality
- Fullscreen slideshow widget
- Transition effects and timing
- Slideshow controls and navigation

#### 6. **dialogs.py** (existing, ~400 lines)
**Purpose**: Modal dialog windows
- Tag management dialogs
- Export configuration dialogs
- Search and query builder dialogs
- Database maintenance dialogs

#### 7. **export_preview.py** (existing, ~300 lines)
**Purpose**: Export functionality
- Export preview and configuration
- Background export operations
- File structure generation

## Communication Between Modules

### Signal/Slot Architecture
```python
# viewer.py coordinates between modules
class MainWindow(QMainWindow):
    def __init__(self):
        # Create specialized controllers
        self.image_display = ImageDisplayWidget()
        self.keyboard_handler = KeyboardHandler(self)
        self.navigation_controller = NavigationController(self)
        
        # Connect signals between modules
        self.navigation_controller.image_changed.connect(self.image_display.load_image)
        self.image_display.image_loaded.connect(self._update_ui_state)
        self.keyboard_handler.action_triggered.connect(self._handle_keyboard_action)
```

### Dependency Flow
```
viewer.py (coordinator)
    ├── image_display.py (visual operations)
    ├── keyboard_handler.py (input handling)  
    ├── navigation_controller.py (navigation logic)
    └── dialogs.py (modal operations)
```

## Enhanced Features to Add

### 1. **Animated GIF Support** (in image_display.py)
```python
class AnimatedGifHandler:
    def __init__(self, parent_widget):
        self.movie = QMovie()
        self.parent_widget = parent_widget
    
    def load_gif(self, file_path):
        self.movie.setFileName(file_path)
        self.parent_widget.setMovie(self.movie)
        self.movie.start()
    
    def pause_animation(self):
        self.movie.setPaused(True)
    
    def resume_animation(self):
        self.movie.setPaused(False)
```

### 2. **Enhanced Image Manipulation** (in image_display.py)
- Brightness/contrast adjustments
- Image filters (sepia, grayscale, etc.)
- Rotation in arbitrary angles (not just 90°)
- Image cropping preview
- Histogram display

### 3. **Advanced Keyboard Handling** (in keyboard_handler.py)
- Context-sensitive shortcuts
- Hotkey conflict detection
- Runtime hotkey modification
- Hotkey help overlay

### 4. **Smart Navigation** (in navigation_controller.py)
- Folder-aware navigation
- Recently viewed images
- Bookmarks/favorites quick access
- Jump to image by date/tag

## Migration Strategy

1. **Phase 1**: Create new modular files with clean interfaces
2. **Phase 2**: Move existing functionality to appropriate modules
3. **Phase 3**: Update viewer.py to coordinate between modules
4. **Phase 4**: Add new features (GIF support, enhanced manipulation)
5. **Phase 5**: Testing and refinement


### 1. Best Image Display Package
use pyqt with a light tkinter slideshow viewer for raspberry pi

### 2. Database Recommendation
**Primary: SQLite with SQLAlchemy ORM**

## Core Components Design

### 1. Configuration Management (`config/`)

**config_manager.py:**
- YAML-based configuration files
- Hierarchical config loading (default → user → directory-specific)
- Runtime configuration updates
- Hot-reload capability for slideshow mode

**Configuration Structure:**
```yaml
ui:
  start_fullscreen: true
  default_zoom: "fit_to_canvas"  # no_zoom, fit_to_canvas, fill_canvas
  undo_queue_size: 1000

hotkeys:
  custom:
    b: "event_tags/birthday"
    g: "people_tags/child1"
    shift_g: "people_tags/child2"
    h: "scene_tags/hiking"

slideshow:
  duration: 5.0
  transition: "fade"  # fade, wipe, replace
  random_order: false

database:
  type: "sqlite"  # sqlite, postgresql, mysql
  path: ".photo_manager.db"
```

### 2. Database Layer (`database/`)

**models.py - Database Schema:**
```python
class Image:
    id: Primary Key
    file_path: String (absolute path)
    filename: String
    phash: String (perceptual hash for duplicates)
    dhash: String (difference hash for additional similarity)
    file_size: Integer
    width: Integer
    height: Integer
    date_taken: DateTime
    date_added: DateTime
    photographer: String
    location_lat: Float
    location_lng: Float
    location_name: String
    tags_reviewed: Boolean
    is_corrupt: Boolean
    load_error: String (null if no error)

class Tag:
    id: Primary Key
    name: String
    category: String (favorites, to_delete, scene_tags, event_tags, people_tags)

class ImageTag:
    image_id: Foreign Key
    tag_id: Foreign Key
```

**database_manager.py:**
- Database connection management
- Migration handling
- Query optimization
- Support for multiple database backends

### 3. UI Layer (`ui/`)

**viewer.py - Qt Main Viewer:**
- Image display with zoom, pan, rotate
- Keyboard shortcut handling
- Information overlay
- Tag display and editing with rich UI widgets
- Fullscreen support
- Advanced dialogs for tag management and querying

**pi_slideshow.py - Tkinter Pi Slideshow:**
- Minimal resource usage
- Borderless fullscreen mode
- Simple fade transitions between images
- Database-driven image selection
- Basic keyboard controls (next/prev/quit)
- Query support for filtered slideshows

**slideshow.py - Slideshow Mode:**
- Automatic image progression
- Transition effects
- Minimal UI for digital picture frame use
- Configuration-driven behavior

### 4. Core Processing (`core/`)

**image_processor.py:**
- Image loading with comprehensive error handling
- Resize/zoom/rotate operations
- Brightness/contrast adjustments
- GIF animation support
- Memory-efficient processing
- **Progressive loading for large files**
- **Image cache with pre-loading (next n images) and retention (previous n images)**
- **Corrupt image detection and flagging**

**file_scanner.py:**
- Recursive directory scanning
- File type detection
- Progress reporting
- Threaded scanning for responsiveness
- File watch capabilities for real-time updates

**duplicate_detector.py:**
- **pHash (Perceptual Hash)** - Primary algorithm for duplicate detection
- **dHash (Difference Hash)** - Secondary for different types of similarities  
- Threaded hash calculation
- Near-duplicate detection for resized/compressed images
- Duplicate resolution workflows

**tag_manager.py:**
- Tag CRUD operations
- Tag filtering and search
- Bulk tag operations
- Tag template system for auto-tagging

**export_manager.py:**
- Query-based image selection
- Directory structure generation
- Copy vs. move operations
- Collision handling (birthday_vacation folders)

### 5. Utilities (`utils/`)

**exif_reader.py:**
- EXIF data extraction
- GPS coordinate parsing
- Camera information extraction
- Date/time handling with timezone support

**filename_parser.py:**
- Regex-based date extraction
- Template-based parsing system
- Support for various filename formats

## Key Features Implementation

### 1. Multi-Database Support
```python
class DatabaseManager:
    def __init__(self, db_type, connection_string):
        if db_type == 'sqlite':
            self.engine = create_engine(f'sqlite:///{connection_string}')
        elif db_type == 'postgresql':
            self.engine = create_engine(connection_string)
        # etc.
```

### 2. Template-Based Auto-Tagging (Optional)
```python
# Separate YAML file loaded per-directory
class AutoTagManager:
    def load_template(self, template_path=None):
        """Load auto-tag template for current directory or skip if None"""
        if template_path and os.path.exists(template_path):
            return yaml.load(template_path)
        return None  # No auto-tagging beyond date/location
```

**Example auto_tag_template.yaml:**
```yaml
# Fixed tags applied to ALL images in this import
fixed_tags:
  event_tags: ["vacation", "beach"]
  people_tags: ["family"]
  photographer: "Dad"

# Pattern-based tags (optional - can be omitted or set to 'none')
auto_tag_templates:
  - pattern: "/{year}/{photographer}/{people}-{scene}*.{ext}"
    mapping:
      photographer: "photographer"
      people: "people_tags"
      scene: "scene_tags"
  # Skip pattern-based auto-tagging entirely
  - pattern: "none"

# Three modes:
# 1. Both fixed_tags AND pattern matching
# 2. Only fixed_tags (pattern: "none" or omit auto_tag_templates section)
# 3. Only pattern matching (omit fixed_tags section)
# 4. No auto-tagging (omit entire template file or use --no-auto-tag)
```

### 3. Advanced Duplicate Detection (pHash + dHash)
- **pHash (Perceptual Hash)**: Primary method - robust against resizing, compression, minor edits
- **dHash (Difference Hash)**: Secondary method - faster, good for exact and near-exact matches
- **Progressive detection**: Fast dHash first, then pHash for remaining candidates
- **Hamming distance comparison**: Configurable similarity threshold

### 4. Export System with Preview and Database Export
```python
def preview_export(query, structure_template):
    """
    Preview images that would be exported and target directory structure
    
    Args:
        query: Tag-based filter query
        structure_template: "{year}/{event_tag}" or similar
    
    Returns:
        List of (source_path, target_path) tuples for preview
    """

def export_images(query, export_path, structure_template, operation='copy', 
                 export_database=False, confirmed_preview=None):
    """
    Export images after preview confirmation
    
    Args:
        export_database: If True, create subset database with only exported images
                        Useful for Pi slideshow deployments
    """

def create_subset_database(exported_images, source_db_path, target_db_path):
    """
    Create new database containing only the exported images and their metadata
    Perfect for Pi slideshow that needs lightweight database
    """
```

### 5. Keyboard Shortcut System
- Dynamic hotkey registration
- Modifier key support (Ctrl, Alt, Shift)
- Configuration-driven shortcuts
- Runtime shortcut addition/modification

## Additional Tag Categories (Beyond Your List)

**None - using only the specified categories from your requirements**

## Performance Optimizations

### 1. Lazy Loading + Intelligent Pre-loading
- Load image metadata first, actual images on demand  
- **Thumbnail caching system**
- **Progressive image loading for large files**
- **Pre-load next n images in background (configurable)**
- **Retain previous n images in cache (configurable)**
- **Smart cache management**: Keep frequently accessed images longer

### 2. Background Processing
- Hash calculation in separate threads
- Database operations in thread pool
- Non-blocking UI updates

### 3. Memory Management
- Image cache with LRU eviction
- Configurable cache sizes
- Efficient image format conversion

## CLI Interface Design

```bash
# Standard viewing mode
python -m photo_manager /path/to/photos

# Slideshow mode for digital frame
python -m photo_manager --slideshow /path/to/photos

# Specific configuration with optional auto-tagging template
python -m photo_manager --config /path/to/config.yaml --auto-tag-template /path/to/template.yaml /path/to/photos

# No auto-tagging (only date/location from EXIF)
python -m photo_manager --no-auto-tag /path/to/photos

# Database operations
python -m photo_manager --scan-only /path/to/photos
python -m photo_manager --export-query "event_tags:birthday AND people_tags:child1" /export/path
```

## Error Handling & Recovery

1. **Corrupted Database**: Automatic backup and recovery
2. **Missing Images**: Graceful handling with user prompts
3. **Permission Issues**: Clear error messages and alternatives
4. **Memory Issues**: Automatic quality reduction for large images
5. **Corrupt Images**: Display "Could not load image" placeholder, flag for deletion
6. **Loading Errors**: Log errors, continue processing other images
7. **Hash Calculation Failures**: Skip hashing, continue with other metadata

## Testing Strategy

1. **Unit Tests**: Each component individually
2. **Integration Tests**: Database + UI interactions
3. **Performance Tests**: Large directory handling
4. **UI Tests**: Keyboard shortcuts and workflows

## Development Phases

### Phase 1: Core Infrastructure
- Database models and migrations
- Configuration management
- Basic file scanning

### Phase 2: Image Viewing
- Basic viewer with zoom/pan
- Keyboard shortcuts
- Tag display

### Phase 3: File Management
- Tag editing and management
- Export functionality
- Duplicate detection

### Phase 4: Advanced Features
- Slideshow mode
- Advanced filtering
- Performance optimizations

### Phase 5: Polish & Testing
- Error handling
- Documentation
- Comprehensive testing

This architecture provides a solid foundation that's maintainable, extensible, and addresses all your requirements while being significantly more organized than the current monolithic script.